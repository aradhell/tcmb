{"name":"TCMB","tagline":"T.C. Merkez Bankası Döviz Kurları","body":"# T.C. Merkez Bankası Kur Kütüphanesi [![Build Status](https://travis-ci.org/teknomavi/tcmb.svg?branch=master)](https://travis-ci.org/teknomavi/tcmb)\r\n## Teknomavi\\Tcmb Nedir ?\r\nT.C. Merkez Bankası tarafından http://www.tcmb.gov.tr/kurlar/today.xml adresinde yayınlanan güncel döviz kurlarını okumak için kullanılan açık kaynak bir PHP kütüphanesidir.\r\n\r\n## Neler Yapılabilir ?\r\nBu kütüphane ile günlük döviz kurları otomatik olarak çekilmektedir.\r\nTCMB sitesinde yayınlanan tüm kurlar için mevcut \"Alış\", \"Satış\", \"Efektif Alış\" ve \"Efektif Satış\" değerlerine ulaşabilirsiniz.\r\n\r\n## Nasıl Kullanılır ?\r\nTeknomavi\\Tcmb composer ile kurulabilir.\r\nProjenizdeki composer.json dosyasında require bölümüne *\"teknomavi/tcmb\": \"dev-master\"* eklemeniz ve *composer update* komutunu çalıştırmanız yeterlidir.\r\n\r\ncomposer kurulumu/kullanımı hakkında bilgiye ihtiyacınız varsa [bu bağlantıdaki](http://www.teknomavi.com/yazilim/php/composer-paket-yoneticisi-nedir-nasil-kurulur-nasil-kullanilir/) dökümanı incelebilirsiniz.\r\n\r\n### Örnek Kod\r\nKütüphanenin en temel kullanımı aşağıdaki gibidir;\r\n```php\r\nuse Teknomavi\\Tcmb\\Doviz;\r\n$doviz = new Doviz();\r\necho \" USD Alış:\" . $doviz->kurAlis(\"USD\");\r\necho \" USD Satış:\" . $doviz->kurSatis(\"USD\");\r\necho \" EURO Efektif Alış:\" . $doviz->kurAlis(\"EUR\", Doviz::TYPE_EFEKTIFALIS);\r\necho \" EURO Efektif Satış:\" . $doviz->kurSatis(\"EUR\", Doviz::TYPE_EFEKTIFSATIS);\r\n\r\n```\r\n\r\n## Sıkça Sorulan Sorular\r\n### Kütüphanenin Her Seferinde TCMB Üzerinden Data Çekmesi Nasıl Engellenir?\r\nTCMB Sitesinden çekilen veriler, sınıfı oluştururken vereceğiniz bir Doctrine\\Common\\Cache\\CacheProvider üzerinde tutulabilir.\r\nBu sayede her seferinde tcmb sitesinden çekilmeyeceği için performans artışı sağlanabilir.\r\nDoctrine Cache hakkında detaylı bilgiye [buradan](http://doctrine-orm.readthedocs.org/en/latest/reference/caching.html) ulaşabilirsiniz.\r\n\r\nÖrnek: Doctrine Memcache CacheProvider ile kullanımı\r\n```php\r\nuse Teknomavi\\Tcmb\\Doviz;\r\n\r\n// Doctrine Memcache Init\r\n$memcache = new Memcache();\r\n$memcache->connect('localhost', 11211);\r\n$cacheDriver = new \\Doctrine\\Common\\Cache\\MemcacheCache();\r\n$cacheDriver->setMemcache($memcache);\r\n// Doviz Kütüphanesi\r\n$doviz = new Doviz($cacheDriver);\r\necho \" USD Alış:\" . $doviz->kurAlis(\"USD\");\r\necho \" USD Satış:\" . $doviz->kurSatis(\"USD\");\r\necho \" EURO Efektif Alış:\" . $doviz->kurAlis(\"EUR\", Doviz::TYPE_EFEKTIFALIS);\r\necho \" EURO Efektif Satış:\" . $doviz->kurSatis(\"EUR\", Doviz::TYPE_EFEKTIFSATIS);\r\n\r\n```\r\n\r\n### Doctrine\\Common\\Cache\\CacheProvider harici bir önbellek yapısı kullanıyorum. Ne yapabilirim?\r\nSınıfın oluşturduğu data değişkenini getData() fonksiyonu kendiniz saklayıp, tekrar kullanacağınızda setData($data) fonksiyonu ile sınıfa tekrar verebilirsiniz.\r\n\r\nÖrnek: json_encode/json_decode ile önbelleğin bir dosyada tutulması\r\n```php\r\n$doviz = new \\Teknomavi\\Tcmb\\Doviz();\r\n// Cache Kodları Başlangıç\r\n$fileName = dirname(__FILE__) . \"/data.json\";\r\nif (file_exists($fileName)) {\r\n    $data       = json_decode(file_get_contents($fileName), true);\r\n    $cacheValid = $doviz->setData($data);\r\n} else {\r\n    $cacheValid = false;\r\n}\r\nif (!$cacheValid) {\r\n    file_put_contents($fileName, json_encode($doviz->getData()));\r\n}\r\n// Cache Kodları Bitiş\r\necho \" USD Alış:\" . $doviz->kurAlis(\"USD\");\r\necho \" USD Satış:\" . $doviz->kurSatis(\"USD\");\r\necho \" EURO Efektif Alış:\" . $doviz->kurAlis(\"EUR\", \\Teknomavi\\Tcmb\\Doviz::TYPE_EFEKTIFALIS);\r\necho \" EURO Efektif Satış:\" . $doviz->kurSatis(\"EUR\", \\Teknomavi\\Tcmb\\Doviz::TYPE_EFEKTIFSATIS);\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}